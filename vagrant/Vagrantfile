# -*- mode: ruby -*-
# vi: set ft=ruby :

# All Vagrant configuration is done below. The "2" in Vagrant.configure
# configures the configuration version (we support older styles for
# backwards compatibility). Please don't change it unless you know what
# you're doing.
Vagrant.configure("2") do |config|
  # The most common configuration options are documented and commented below.
  # For a complete reference, please see the online documentation at
  # https://docs.vagrantup.com.

  # Every Vagrant development environment requires a box. You can search for
  # boxes at https://atlas.hashicorp.com/search.
  #config.vm.box = "base"
  config.vm.box = "centos/7"

  # Disable automatic box update checking. If you disable this, then
  # boxes will only be checked for updates when the user runs
  # `vagrant box outdated`. This is not recommended.
  # config.vm.box_check_update = false

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine. In the example below,
  # accessing "localhost:8080" will access port 80 on the guest machine.
  #config.vm.network "forwarded_port", guest: 443, host: 10443

  # Create a private network, which allows host-only access to the machine
  # using a specific IP.
  # config.vm.network "private_network", ip: "192.168.33.10"

  # Create a public network, which generally matched to bridged network.
  # Bridged networks make the machine appear as another physical device on
  # your network.
  # config.vm.network "public_network"

  # Share an additional folder to the guest VM. The first argument is
  # the path on the host to the actual folder. The second argument is
  # the path on the guest to mount the folder. And the optional third
  # argument is a set of non-required options.
  # config.vm.synced_folder "../data", "/vagrant_data"

   #config.vm.synced_folder "../", "/vagrant", type: "rsync", rsync__exclude: ".git/"
  
  # Provider-specific configuration so you can fine-tune various
  # backing providers for Vagrant. These expose provider-specific options.
  # Example for VirtualBox:
  #
  config.vm.define "carpool-vb" do |config|
	config.vm.provider "virtualbox" do |vb|
		# Display the VirtualBox GUI when booting the machine
		vb.gui = true
		config.vm.synced_folder ".", "/vagrant", disabled: true
		config.vm.network "private_network", type: "dhcp"
  
		# this is on your local virtual box
		vb.memory = "1024"
		vb.cpus = 2
	end
  end
  
  # https://github.com/devopsgroup-io/vagrant-digitalocean 
  config.vm.define "carpool-do" do |config|
      config.vm.provider :digital_ocean do |provider, override|
		config.vm.synced_folder ".", "/vagrant", disabled: true
        override.ssh.private_key_path = '~/.ssh/id_rsa'
        override.vm.box = 'digital_ocean'
        override.vm.box_url = "https://github.com/devopsgroup-io/vagrant-digitalocean/raw/master/box/digital_ocean.box"
        provider.token = 'CHANGE_ME'  # use your API key here
        provider.image = 'centos-7-0-x64'  # don't change this, the provisioning steps rely on yum, which is a centos/rhel/fedora tool 
        provider.region = 'nyc1'    # use vagrant digitalocean-list  regions <apikey>  for list of regions close to you
        provider.size = '512mb'     # use vagrant digitalocean-list  sizes  <apikey>  for list of supported sizes
      end
  end
  
  #
  # View the documentation for the provider you are using for more
  # information on available options.

  # Define a Vagrant Push strategy for pushing to Atlas. Other push strategies
  # such as FTP and Heroku are also available. See the documentation at
  # https://docs.vagrantup.com/v2/push/atlas.html for more information.
  # config.push.define "atlas" do |push|
  #   push.app = "YOUR_ATLAS_USERNAME/YOUR_APPLICATION_NAME"
  # end

  # Enable provisioning with a shell script. Additional provisioners such as
  # Puppet, Chef, Ansible, Salt, and Docker are also available. Please see the
  # documentation for more information about their specific syntax and use.
  # config.vm.provision "shell", inline: <<-SHELL
  #   apt-get update
  #   apt-get install -y apache2
  # SHELL
  config.vm.provision "shell", inline: <<-SHELL
  
	########################
	# GENERAL STUFF
	########################  
	yum -y install \
		epel-release \
		curl \
		wget \
		net-tools \
		git \
		python2-certbot.noarch \
		python2-certbot-nginx.noarch \
		docker
	
	curl -L https://github.com/docker/compose/releases/download/1.22.0/docker-compose-$(uname -s)-$(uname -m) -o /usr/local/bin/docker-compose
	chmod +x /usr/local/bin/docker-compose
	
	
	########################
	#       BACK END 
	########################  
	mkdir -p /opt/carpool
	cd /opt/carpool
	git clone https://github.com/voteamerica/backend.git
	cd backend
	
	# looks like there are some iptables issues with docker networking
	# issue is that it's not possible to perform name resolution 
	# from inside the container to a name on internet
	# remember it's like this Container->VirtualBox VM->Windows->Router NAT
	# Anyway, my lack of understanding of this issue 
	# is acceptable when all we need to do stop the firewall and restart docker service
	systemctl stop firewalld
	systemctl stop docker
	systemctl start docker
	/usr/local/bin/docker-compose -f docker-compose-build.yml build
	systemctl stop docker
	systemctl start firewalld
	systemctl start docker
	systemctl enable docker
	
	
	# allow olny https, not http incoming traffic
	systemctl enable firewalld
	systemctl start firewalld
	firewall-cmd --remove-service=http
	firewall-cmd --add-service=https
	firewall-cmd --runtime-to-permanent
	
	
	########################
	# FRONT END
	########################
	# add here instructions to create container for front end
	
  SHELL
end
